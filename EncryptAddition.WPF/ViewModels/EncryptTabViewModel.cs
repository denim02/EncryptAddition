using EncryptAddition.Crypto;
using EncryptAddition.WPF.Commands;
using EncryptAddition.WPF.DataTypes;
using EncryptAddition.WPF.Models.Stores;
using System.Numerics;
using System.Windows.Input;

namespace EncryptAddition.WPF.ViewModels
{
    public class EncryptTabViewModel : BaseViewModel
    {
        public EncryptionChoice[] StrategyList { get; } = { EncryptionChoice.ElGamal, EncryptionChoice.Paillier };

        private bool _isKeyAutoGenerated;
        public bool IsKeyAutoGenerated
        {
            get => _isKeyAutoGenerated;
            set
            {
                _isKeyAutoGenerated = value;
                OnPropertyChanged(nameof(IsKeyAutoGenerated));
                OnPropertyChanged(nameof(CanDecrypt));
            }
        }

        private int _bitLength;
        public int BitLength
        {
            get => _bitLength;
            set
            {
                _bitLength = value;
                OnPropertyChanged(nameof(BitLength));
            }
        }

        private string _serializedCustomKey;
        public string SerializedCustomKey
        {
            get => _serializedCustomKey;
            set
            {
                _serializedCustomKey = value;
                OnPropertyChanged(nameof(SerializedCustomKey));
            }
        }

        private EncryptionChoice _encryptionChoice = EncryptionChoice.Paillier;
        public EncryptionChoice EncryptionChoice
        {
            get => _encryptionChoice;
            set
            {
                _encryptionChoice = value;
                OnPropertyChanged(nameof(EncryptionChoice));
            }
        }

        private OperationChoice _operationChoice;
        public OperationChoice OperationChoice
        {
            get => _operationChoice;
            set
            {
                _operationChoice = value;
                OnPropertyChanged(nameof(OperationChoice));
            }
        }

        public bool CanDecrypt => !IsKeyAutoGenerated && EncryptServiceStore.IsInstantiated;

        private BigInteger[] _encryptionInputValues;
        public BigInteger[] EncryptionInputValues
        {
            get => _encryptionInputValues;
            set
            {
                _encryptionInputValues = value;
                OnPropertyChanged(nameof(EncryptionInputValues));
            }
        }

        private CipherText[] _decryptionInputValues;
        public CipherText[] DecryptionInputValues
        {
            get => _decryptionInputValues;
            set
            {
                _decryptionInputValues = value;
                OnPropertyChanged(nameof(DecryptionInputValues));
            }
        }

        private bool _isPreparingService = false;
        public bool IsPreparingService
        {
            get => _isPreparingService;
            set
            {
                _isPreparingService = value;
                OnPropertyChanged(nameof(IsPreparingService));
                OnPropertyChanged(nameof(IsBusy));
            }
        }

        private bool _isRunningOperation = false;
        public bool IsRunningOperation
        {
            get => _isRunningOperation;
            set
            {
                _isRunningOperation = value;
                OnPropertyChanged(nameof(IsRunningOperation));
                OnPropertyChanged(nameof(IsBusy));
            }
        }

        public bool IsBusy => IsPreparingService || _isRunningOperation;

        private EncryptionServiceResult? _result = null;
        public EncryptionServiceResult? Result
        {
            get => _result;
            set
            {
                _result = value;
                OnPropertyChanged(nameof(Result));
            }
        }

        public ICommand ExecuteOperation
        { get; }

        public EncryptTabViewModel()
        {
            ExecuteOperation = new ExecuteOperationCommand(this);
        }
    }
}
